#pragma once

#include <Utilities/Macros/Enums.h>

#include <vulkan/vulkan.h>
#include <map>

#include "VkDefinitions.h"

namespace Savanna::Gfx::Vulkan
{
    constexpr static std::map<VkResult, const char*> k_VkResultToStringTable
    {
        // Copied from <vulkancore.h>
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_SUCCESS),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_NOT_READY),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_TIMEOUT),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_EVENT_SET),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_EVENT_RESET),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_INCOMPLETE),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_OUT_OF_HOST_MEMORY),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_OUT_OF_DEVICE_MEMORY),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_INITIALIZATION_FAILED),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_DEVICE_LOST),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_MEMORY_MAP_FAILED),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_LAYER_NOT_PRESENT),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_EXTENSION_NOT_PRESENT),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_FEATURE_NOT_PRESENT),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_INCOMPATIBLE_DRIVER),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_TOO_MANY_OBJECTS),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_FORMAT_NOT_SUPPORTED),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_FRAGMENTED_POOL),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_UNKNOWN),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_OUT_OF_POOL_MEMORY),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_INVALID_EXTERNAL_HANDLE),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_FRAGMENTATION),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_SURFACE_LOST_KHR),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_NATIVE_WINDOW_IN_USE_KHR),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_SUBOPTIMAL_KHR),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_OUT_OF_DATE_KHR),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_INCOMPATIBLE_DISPLAY_KHR),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_VALIDATION_FAILED_EXT),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_INVALID_SHADER_NV),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_NOT_PERMITTED_EXT),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_THREAD_IDLE_KHR),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_THREAD_DONE_KHR),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_OPERATION_DEFERRED_KHR),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_OPERATION_NOT_DEFERRED_KHR),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_PIPELINE_COMPILE_REQUIRED_EXT),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_OUT_OF_POOL_MEMORY_KHR),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_FRAGMENTATION_EXT),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_INVALID_DEVICE_ADDRESS_EXT),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT),
        DECLARE_SAVANNA_ENUM_STRING_PAIR(VK_RESULT_MAX_ENUM)
    };

    class VkResultUtils
    {
    public:
        inline static const char* ToString(VkResult result)
        {
            return k_VkResultToStringTable.at(result);
        }
    private:
        VkResultUtils() = delete;
    };
} // namespace Savanna::Render::Vk

#undef DECLARE_SAVANNA_ENUM_STRING_PAIR
