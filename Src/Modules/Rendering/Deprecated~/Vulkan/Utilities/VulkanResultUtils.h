#pragma once

#include <Utilities/Macros/Enums.h>

#include <vulkan/vulkan.h>
#include <map>

#include "VulkanDefinitions.h"

namespace Savanna
{
    namespace Vulkan
    {
        const static std::map<VkResult, const char*> k_VkResultToStringTable
        {
            // Copied from <vulkancore.h>
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_SUCCESS),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_NOT_READY),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_TIMEOUT),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_EVENT_SET),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_EVENT_RESET),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_INCOMPLETE),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_OUT_OF_HOST_MEMORY),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_OUT_OF_DEVICE_MEMORY),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_INITIALIZATION_FAILED),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_DEVICE_LOST),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_MEMORY_MAP_FAILED),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_LAYER_NOT_PRESENT),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_EXTENSION_NOT_PRESENT),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_FEATURE_NOT_PRESENT),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_INCOMPATIBLE_DRIVER),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_TOO_MANY_OBJECTS),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_FORMAT_NOT_SUPPORTED),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_FRAGMENTED_POOL),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_UNKNOWN),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_OUT_OF_POOL_MEMORY),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_INVALID_EXTERNAL_HANDLE),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_FRAGMENTATION),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_SURFACE_LOST_KHR),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_NATIVE_WINDOW_IN_USE_KHR),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_SUBOPTIMAL_KHR),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_OUT_OF_DATE_KHR),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_INCOMPATIBLE_DISPLAY_KHR),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_VALIDATION_FAILED_EXT),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_INVALID_SHADER_NV),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_NOT_PERMITTED_EXT),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_THREAD_IDLE_KHR),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_THREAD_DONE_KHR),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_OPERATION_DEFERRED_KHR),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_OPERATION_NOT_DEFERRED_KHR),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_PIPELINE_COMPILE_REQUIRED_EXT),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_OUT_OF_POOL_MEMORY_KHR),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_FRAGMENTATION_EXT),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_INVALID_DEVICE_ADDRESS_EXT),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT),
            SAVANNA_ENUM_STRING_PAIR_DECL(VK_RESULT_MAX_ENUM)
        };

        class VulkanResultUtils
        {
        public:
            inline static const char* ToString(VkResult result)
            {
                return k_VkResultToStringTable.at(result);
            }
        private:
            VulkanResultUtils() = delete;
        };
    } // namespace Vulkan

} // namespace Savanna

#undef SAVANNA_ENUM_STRING_PAIR_DECL
