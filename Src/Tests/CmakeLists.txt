cmake_minimum_required(VERSION 3.21 FATAL_ERROR)

# Set Application Name
set(app_name SavannaTestRunner)

# Define specific app modules
set(app_modules ${CMAKE_CURRENT_LIST_DIR}/*.cmake)

message("Generating ${app_name}")

set(GOOGLETEST_TAG "main")

# Fetch the content of GoogleTest
include(FetchContent)
FetchContent_Declare(
    googletest
    GIT_REPOSITORY https://github.com/google/googletest.git
    GIT_TAG ${GOOGLETEST_TAG}
)
# For Windows: Prevent overriding the parent project's compiler/linker settings
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
FetchContent_MakeAvailable(googletest)

# Turn on the ability to create folders to organize projects (.vcproj)
# It creates "CMakePredefinedTargets" folder by default and adds CMake
# defined projects like INSTALL.vcproj and ZERO_CHECK.vcproj
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Acquire all subdirectories, This is evil for the record
file(GLOB_RECURSE src
    ${CMAKE_CURRENT_LIST_DIR}/*.cpp
    ${CMAKE_CURRENT_LIST_DIR}/*.c
    ${CMAKE_CURRENT_LIST_DIR}/*.h
    ${CMAKE_CURRENT_LIST_DIR}/*.hpp)

# Filter any directory that contains a '~' in it's path.
list(FILTER src EXCLUDE REGEX "${CMAKE_CURRENT_LIST_DIR}/(.+)~(.+)")

# Sort the files into Filters based on Folder Hierarchy
SOURCE_GROUP_BY_FOLDER()

# Enable Testing
enable_testing()

# Add Executable
add_executable(${app_name} ${src})

set(target_static_libs
    Core
    Entities)

set(core_include_dirs
	# Savanna Core
	${CMAKE_SOURCE_DIR}/Core
    ${CMAKE_SOURCE_DIR}/Modules/Entities)

set(module_include_dirs
    # Savanna Modules
    ${CMAKE_SOURCE_DIR}/Modules)

target_include_directories(
	${app_name}
	PUBLIC
    ${CMAKE_CURRENT_LIST_DIR}
	# Core Libraries
	${core_include_dirs}
    # Modules
    ${module_include_dirs})

target_link_libraries(${app_name}
    ${target_static_libs}
    ${target_shared_libs}
    # GoogleTest
    GTest::gtest_main)

include(GoogleTest)

# Define project properties
set_property(TARGET ${Recipe_Name} PROPERTY RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/binaries)
set_property(TARGET ${Recipe_Name} PROPERTY RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_SOURCE_DIR}/binaries)
set_property(TARGET ${Recipe_Name} PROPERTY RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/binaries)
set_property(TARGET ${Recipe_Name} PROPERTY RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${CMAKE_CURRENT_SOURCE_DIR}/binaries)
set_property(TARGET ${Recipe_Name} PROPERTY RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${CMAKE_CURRENT_SOURCE_DIR}/binaries)

# Define C++ version to be used for building the project
set_property(TARGET ${Recipe_Name} PROPERTY CXX_STANDARD 20)
set_property(TARGET ${Recipe_Name} PROPERTY CXX_STANDARD_REQUIRED ON)

# Define C version to be used for building the project
set_property(TARGET ${Recipe_Name} PROPERTY C_STANDARD 99)
set_property(TARGET ${Recipe_Name} PROPERTY C_STANDARD_REQUIRED ON)

# Discover Tests
gtest_discover_tests(${app_name})

# Install Binaries in Build Folder
install(TARGETS ${app_name} RUNTIME DESTINATION bin)
