cmake_minimum_required(VERSION 3.26 FATAL_ERROR)

set(SAVANNA_ACTIVE_TARGET SavannaTestRunner)

message(STATUS "Building [${SAVANNA_ACTIVE_TARGET}] Application")

set(GOOGLETEST_TAG "main")

include(FetchContent)

# # Fetch the content of GoogleTest
FetchContent_Declare(
    googletest
    GIT_REPOSITORY https://github.com/google/googletest.git
    GIT_TAG ${GOOGLETEST_TAG}
)

# For Windows: Prevent overriding the parent project's compiler/linker settings
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
FetchContent_MakeAvailable(googletest)

# message (STATUS "Fetching glfw")
# FetchContent_Declare(
#     glfw
#     GIT_REPOSITORY https://github.com/glfw/glfw
# )

# message (STATUS "Fetching glm")
# FetchContent_Declare(
#     glm
#     GIT_REPOSITORY https://github.com/g-truc/glm
# )

# FetchContent_MakeAvailable(glfw glm)
    #protobuf)

collect_native_sources_in_current_dir(src RECURSIVE_LIMITED)

# Sort the files into Filters based on Folder Hierarchy
SOURCE_GROUP_BY_FOLDER()

# Turn on the ability to create folders to organize projects (.vcproj)
# It creates "CMakePredefinedTargets" folder by default and adds CMake
# defined projects like INSTALL.vcproj and ZERO_CHECK.vcproj
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Add Executable
add_executable(${SAVANNA_ACTIVE_TARGET} ${src})

# Link libraries
target_link_libraries(  ${SAVANNA_ACTIVE_TARGET}
                        Savanna)

include_savanna_directories(${SAVANNA_ACTIVE_TARGET}
                            ${CMAKE_SOURCE_DIR}/Runtime)

target_include_directories( ${SAVANNA_ACTIVE_TARGET}
                            PUBLIC ${Vulkan_INCLUDE_DIRS})
                            # PUBLIC ${CMAKE_SOURCE_DIR}/Runtime)

# Copy Assets folder to install directory


include(GoogleTest)

# Define project properties
set_property(TARGET ${Recipe_Name} PROPERTY RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/binaries)
set_property(TARGET ${Recipe_Name} PROPERTY RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_SOURCE_DIR}/binaries)
set_property(TARGET ${Recipe_Name} PROPERTY RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/binaries)
set_property(TARGET ${Recipe_Name} PROPERTY RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${CMAKE_CURRENT_SOURCE_DIR}/binaries)
set_property(TARGET ${Recipe_Name} PROPERTY RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${CMAKE_CURRENT_SOURCE_DIR}/binaries)

# Define C++ version to be used for building the project
set_property(TARGET ${Recipe_Name} PROPERTY CXX_STANDARD 20)
set_property(TARGET ${Recipe_Name} PROPERTY CXX_STANDARD_REQUIRED ON)

# Define C version to be used for building the project
set_property(TARGET ${Recipe_Name} PROPERTY C_STANDARD 99)
set_property(TARGET ${Recipe_Name} PROPERTY C_STANDARD_REQUIRED ON)

# Discover Tests
gtest_discover_tests(${SAVANNA_ACTIVE_TARGET})

# Enable Testing
enable_testing()

# Install the executable
install(TARGETS ${SAVANNA_ACTIVE_TARGET}
            EXPORT ${SAVANNA_ACTIVE_TARGET}Targets
            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
            INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
